'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});

const setups = Symbol('setups');
const running = Symbol('running');
const setupsadd = Symbol('setups add');
const onFinish = Symbol('event on finish');
const runned = Symbol('runned');

class AppSetup {
	constructor() {
		this[setups] = new Set();

		this[running] = false;
		// Status runned
	}

	// Sedine un nuevo setup
	setup(e) {
		if (typeof e !== 'function') throw new TypeError('setup(): The first parameter not is a function');

		let useCallback = false;
		let usePromise = false;
		let useSecuence = false;

		if (e instanceof AppSetup) {
			this[setups].add(e.run());
		} else {
			// With Callback
			if (e.length >= 1) {
				this[setups].add(new Promise((resolve, reject) => {
					e((err = undefined) => {
						if (err) {
							reject(err);
						} else {
							resolve();
						}
					});
				}));
			} else {
				// Without callback
				try {
					const result = e();

					// Is a Promise
					if (result instanceof Promise) {
						this[setups].add(result);
					} else {
						// is a function sequence
						this[setups].add(Promise.resolve(result));
					}
				} catch (ex) {
					this[setups].add(Promise.reject(ex));
				}
			}
		}
	}

	run() {
		if (this[running] === false) {

			this[runned] = Promise.all([...this[setups].values()]);

			this[running] = true;
		}

		return this[runned];
	}
}

exports.AppSetup = AppSetup;
exports['default'] = AppSetup;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkFwcFNldHVwLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7OztBQUNBLE1BQU0sU0FBUyxPQUFPLFFBQVAsQ0FBZjtBQUNBLE1BQU0sVUFBVSxPQUFPLFNBQVAsQ0FBaEI7QUFDQSxNQUFNLFlBQVksT0FBTyxZQUFQLENBQWxCO0FBQ0EsTUFBTSxXQUFXLE9BQU8saUJBQVAsQ0FBakI7QUFDQSxNQUFNLFNBQVMsT0FBTyxRQUFQLENBQWY7O0FBRU8sTUFBTSxRQUFOLENBQWU7QUFDckIsZUFBZTtBQUNkLE9BQU0sTUFBTixJQUFpQixJQUFJLEdBQUosRUFBakI7O0FBRUEsT0FBTSxPQUFOLElBQWtCLEtBQWxCOztBQUVBOzs7QUFHRCxPQUFNLENBQU4sRUFBUztBQUNSLE1BQUksT0FBTyxDQUFQLEtBQWEsVUFBakIsRUFBNkIsTUFBTSxJQUFJLFNBQUosQ0FBYyxnREFBZCxDQUFOOztBQUU3QixNQUFJLGNBQWMsS0FBbEI7QUFDQSxNQUFJLGFBQWEsS0FBakI7QUFDQSxNQUFJLGNBQWMsS0FBbEI7O0FBRUEsTUFBSSxhQUFhLFFBQWpCLEVBQTJCO0FBQzFCLFFBQU0sTUFBTixFQUFlLEdBQWYsQ0FBbUIsRUFBRSxHQUFGLEVBQW5CO0FBQ0EsR0FGRCxNQUVPOztBQUVOLE9BQUksRUFBRSxNQUFGLElBQVksQ0FBaEIsRUFBbUI7QUFDbEIsU0FBTSxNQUFOLEVBQWUsR0FBZixDQUFtQixJQUFJLE9BQUosQ0FBWSxDQUFDLE9BQUQsRUFBVSxNQUFWLEtBQXFCO0FBQ25ELE9BQUUsQ0FBQyxNQUFNLFNBQVAsS0FBcUI7QUFDdEIsVUFBSSxHQUFKLEVBQVM7QUFDUixjQUFPLEdBQVA7QUFDQSxPQUZELE1BRU87QUFDTjtBQUNBO0FBQ0QsTUFORDtBQU9BLEtBUmtCLENBQW5CO0FBU0EsSUFWRCxNQVVPOztBQUVOLFFBQUk7QUFDSCxXQUFNLFNBQVMsR0FBZjs7O0FBR0EsU0FBSSxrQkFBa0IsT0FBdEIsRUFBK0I7QUFDOUIsV0FBTSxNQUFOLEVBQWUsR0FBZixDQUFtQixNQUFuQjtBQUNBLE1BRkQsTUFFTzs7QUFFTixXQUFNLE1BQU4sRUFBZSxHQUFmLENBQW1CLFFBQVEsT0FBUixDQUFnQixNQUFoQixDQUFuQjtBQUNBO0FBQ0QsS0FWRCxDQVVFLE9BQU8sRUFBUCxFQUFXO0FBQ1osVUFBTSxNQUFOLEVBQWUsR0FBZixDQUFtQixRQUFRLE1BQVIsQ0FBZSxFQUFmLENBQW5CO0FBQ0E7QUFDRDtBQUNEO0FBQ0Q7O0FBRUQsT0FBTTtBQUNMLE1BQUksS0FBTSxPQUFOLE1BQW9CLEtBQXhCLEVBQStCOztBQUU5QixRQUFNLE1BQU4sSUFBaUIsUUFBUSxHQUFSLENBQWEsQ0FBRSxHQUFHLEtBQU0sTUFBTixFQUFlLE1BQWYsRUFBTCxDQUFiLENBQWpCOztBQUVBLFFBQU0sT0FBTixJQUFrQixJQUFsQjtBQUNBOztBQUVELFNBQU8sS0FBTSxNQUFOLENBQVA7QUFDQTtBQTFEb0I7O1FBQVQsUSxHQUFBLFE7cUJBNkRFLFEiLCJmaWxlIjoiQXBwU2V0dXAuanMiLCJzb3VyY2VzQ29udGVudCI6WyJcbmNvbnN0IHNldHVwcyA9IFN5bWJvbCgnc2V0dXBzJylcbmNvbnN0IHJ1bm5pbmcgPSBTeW1ib2woJ3J1bm5pbmcnKVxuY29uc3Qgc2V0dXBzYWRkID0gU3ltYm9sKCdzZXR1cHMgYWRkJylcbmNvbnN0IG9uRmluaXNoID0gU3ltYm9sKCdldmVudCBvbiBmaW5pc2gnKVxuY29uc3QgcnVubmVkID0gU3ltYm9sKCdydW5uZWQnKVxuXG5leHBvcnQgY2xhc3MgQXBwU2V0dXAge1xuXHRjb25zdHJ1Y3RvciAoKSB7XG5cdFx0dGhpc1sgc2V0dXBzIF0gPSBuZXcgU2V0XG5cblx0XHR0aGlzWyBydW5uaW5nIF0gPSBmYWxzZVxuXHRcdC8vIFN0YXR1cyBydW5uZWRcblx0fVxuXG5cdC8vIFNlZGluZSB1biBudWV2byBzZXR1cFxuXHRzZXR1cChlKSB7XG5cdFx0aWYgKHR5cGVvZiBlICE9PSAnZnVuY3Rpb24nKSB0aHJvdyBuZXcgVHlwZUVycm9yKCdzZXR1cCgpOiBUaGUgZmlyc3QgcGFyYW1ldGVyIG5vdCBpcyBhIGZ1bmN0aW9uJylcblxuXHRcdGxldCB1c2VDYWxsYmFjayA9IGZhbHNlXG5cdFx0bGV0IHVzZVByb21pc2UgPSBmYWxzZVxuXHRcdGxldCB1c2VTZWN1ZW5jZSA9IGZhbHNlXG5cblx0XHRpZiAoZSBpbnN0YW5jZW9mIEFwcFNldHVwKSB7XG5cdFx0XHR0aGlzWyBzZXR1cHMgXS5hZGQoZS5ydW4oKSlcblx0XHR9IGVsc2Uge1xuXHRcdFx0Ly8gV2l0aCBDYWxsYmFja1xuXHRcdFx0aWYgKGUubGVuZ3RoID49IDEpIHtcblx0XHRcdFx0dGhpc1sgc2V0dXBzIF0uYWRkKG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcblx0XHRcdFx0XHRlKChlcnIgPSB1bmRlZmluZWQpID0+IHtcblx0XHRcdFx0XHRcdGlmIChlcnIpIHtcblx0XHRcdFx0XHRcdFx0cmVqZWN0KGVycilcblx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRcdHJlc29sdmUoKVxuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH0pXG5cdFx0XHRcdH0pKVxuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0Ly8gV2l0aG91dCBjYWxsYmFja1xuXHRcdFx0XHR0cnkge1xuXHRcdFx0XHRcdGNvbnN0IHJlc3VsdCA9IGUoKVxuXHRcdFx0XHRcblx0XHRcdFx0XHQvLyBJcyBhIFByb21pc2Vcblx0XHRcdFx0XHRpZiAocmVzdWx0IGluc3RhbmNlb2YgUHJvbWlzZSkge1xuXHRcdFx0XHRcdFx0dGhpc1sgc2V0dXBzIF0uYWRkKHJlc3VsdClcblx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0Ly8gaXMgYSBmdW5jdGlvbiBzZXF1ZW5jZVxuXHRcdFx0XHRcdFx0dGhpc1sgc2V0dXBzIF0uYWRkKFByb21pc2UucmVzb2x2ZShyZXN1bHQpKVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0fSBjYXRjaCAoZXgpIHtcblx0XHRcdFx0XHR0aGlzWyBzZXR1cHMgXS5hZGQoUHJvbWlzZS5yZWplY3QoZXgpKVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0cnVuKCkge1xuXHRcdGlmICh0aGlzWyBydW5uaW5nIF0gPT09IGZhbHNlKSB7XG5cblx0XHRcdHRoaXNbIHJ1bm5lZCBdID0gUHJvbWlzZS5hbGwoIFsgLi4udGhpc1sgc2V0dXBzIF0udmFsdWVzKCkgXSApXG5cblx0XHRcdHRoaXNbIHJ1bm5pbmcgXSA9IHRydWVcblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpc1sgcnVubmVkIF1cblx0fVxufVxuXG5leHBvcnQgZGVmYXVsdCBBcHBTZXR1cCJdfQ==